<?xml version="1.0" encoding="UTF-8"?>
<?init class="org.zkoss.zkplus.databind.AnnotateDataBinderInit" ?>
<?variable-resolver class="org.zkoss.zkplus.spring.DelegatingVariableResolver"?>

<zk>
	<window>
		<label multiline="true">
			Extended Usage: 
			* All flow-scoped variables we want to modify in a composer should have a data binding on the zul.
			
		</label>
		<panel apply="${ZK2ndStep}" title="2nd Step">
			<panelchildren>
				<groupbox closable="false">
					<listbox id="myList" model="@{impHelper.myList, load-after='add.onClick'}">
						<listitem self="@{each=entry}" value="@{entry}">
							<listcell value="@{entry}" label="@{entry}" />
						</listitem>
					</listbox>
				</groupbox>
			</panelchildren>
		</panel>
		<!-- hidden component with data binding for composer's access.
		We should use an attribute value that its binding has "write" access, e.g. textbox's value-->
		<textbox value="@{impHelper}" visible="false" />
		<vlayout>
		Click "Add" button and you can see that "Text 3" is add to myList in this and next state.
		<button id="add" label="Add" />
		value1:
		<textbox id="valuebox" value="@{impHelper.value1, save-after='change.onClick'}" />
		Click "Change" button and you can see that value1 is changed in this and next state.
		<button id="change" label="Change" />
		</vlayout>
		<separator/>
		<button id="btnNext" label="Next" onClick="" disabled="false" self="@{action(next)}" />
	</window>
</zk>